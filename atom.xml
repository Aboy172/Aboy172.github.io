<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>个人博客</title>
  
  
  <link href="https://blog.zzcym.asia/atom.xml" rel="self"/>
  
  <link href="https://blog.zzcym.asia/"/>
  <updated>2023-04-07T13:41:55.518Z</updated>
  <id>https://blog.zzcym.asia/</id>
  
  <author>
    <name>cym</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>mysql数据库快速入门</title>
    <link href="https://blog.zzcym.asia/2023/04/07/mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/"/>
    <id>https://blog.zzcym.asia/2023/04/07/mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</id>
    <published>2023-04-07T13:41:12.000Z</published>
    <updated>2023-04-07T13:41:55.518Z</updated>
    
    <content type="html"><![CDATA[<h2 id="mysql-数据库是什么？"><a href="#mysql-数据库是什么？" class="headerlink" title="mysql 数据库是什么？"></a>mysql 数据库是什么？</h2><p>首先它是一种开源的关系型数据库，而关系型数据库的意思是它里面的数据是具有关系的。举个简单的例子：客户信息和订单信息它们是具有关系的，我们可以根据客户的信息拿到对应的订单信息，这就是关系型数据库。由此可以得出结论：关系型数据库擅长显示数据之间非常复杂的关系。目前很多公司也会使用到mysql数据库，可以作为新手入门数据库进行学习。</p><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><p>可以直接理解为数据的总仓库，这里面存放了所有的数据，就像图书馆</p><h3 id="表"><a href="#表" class="headerlink" title="表"></a>表</h3><p>是对数据进行分类，图书馆的书籍太多太杂，针对它们的种类和受众人群不同，将它们进行分组，每组其实就可以看做一张表</p><h2 id="SQL-语法"><a href="#SQL-语法" class="headerlink" title="SQL 语法"></a>SQL 语法</h2><h3 id="一、基础"><a href="#一、基础" class="headerlink" title="一、基础"></a>一、基础</h3><p>模式定义了数据如何存储、存储什么样的数据以及数据如何分解等信息，数据库和表都有模式。</p><p>主键的值不允许修改，也不允许复用（不能将已经删除的主键值赋给新数据行的主键）</p><p>SQL（Structured Query Language)，标准 SQL 由 ANSI 标准委员会管理，从而称为 ANSI SQL。各个 DBMS 都有自己的实现，如 PL&#x2F;SQL、Transact-SQL 等。</p><p>SQL 语句不区分大小写，但是数据库表名、列名和值是否区分依赖于具体的 DBMS 以及配置。</p><p>SQL 支持以下三种注释：</p><ul><li><h1 id=""><a href="#" class="headerlink" title=""></a></h1></li></ul><hr><ul><li>&#x2F;*  &#x2F;*</li></ul><p>数据库创建与使用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">create database 数据库名;</span><br><span class="line">use 数据库名</span><br></pre></td></tr></table></figure><h3 id="二、创建表"><a href="#二、创建表" class="headerlink" title="二、创建表"></a>二、创建表</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> mytable (</span><br><span class="line">  # <span class="type">int</span> 类型，不为空，自增</span><br><span class="line">  id <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  # <span class="type">int</span> 类型，不可为空，默认值为 <span class="number">1</span>，不为空</span><br><span class="line">  col1 <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">1</span>,</span><br><span class="line">  # 变长字符串类型，最长为 <span class="number">45</span> 个字符，可以为空</span><br><span class="line">  col2 <span class="type">VARCHAR</span>(<span class="number">45</span>) <span class="keyword">NULL</span>,</span><br><span class="line">  # 日期类型，可为空</span><br><span class="line">  col3 <span class="type">DATE</span> <span class="keyword">NULL</span>,</span><br><span class="line">  # 设置主键为 id</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`));</span><br></pre></td></tr></table></figure><h3 id="三、修改表"><a href="#三、修改表" class="headerlink" title="三、修改表"></a>三、修改表</h3><p>添加列</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> mytable <span class="keyword">ADD</span> col <span class="type">CHAR</span>(<span class="number">20</span>);</span><br></pre></td></tr></table></figure><p>删除列</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> mytable <span class="keyword">drop</span> <span class="keyword">column</span> col;</span><br></pre></td></tr></table></figure><p>删除表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> mytable</span><br></pre></td></tr></table></figure><h3 id="四、插入"><a href="#四、插入" class="headerlink" title="四、插入"></a>四、插入</h3><p>普通插入</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> mytable (col,col2) <span class="keyword">VALUES</span>(val1, val2);</span><br><span class="line"></span><br><span class="line">#还有另一种插入方式，开发中不常用，可维护性差</span><br><span class="line">#nsert这种简写的方式虽然非常简单,但是<span class="keyword">Values</span>后面的值必须和表中的类顺序对应,且类型要保持一直,即使表中某一个列不需要值也必须赋值为<span class="keyword">null</span>,比如我们的主键id设置的是递增实际上是不用设置值的,但是使用这种方式必须赋值为<span class="keyword">null</span></span><br><span class="line">inset <span class="keyword">into</span> mytable <span class="keyword">VALUES</span>(val1, val2);</span><br></pre></td></tr></table></figure><p>插入检索出来的数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> mytable1(col1,col2)</span><br><span class="line"><span class="keyword">select</span> col1,col2</span><br><span class="line"><span class="keyword">from</span> mytable2;</span><br></pre></td></tr></table></figure><p>将一个表中的内容插入到一个新的表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> newtable <span class="keyword">as</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> mytable;</span><br></pre></td></tr></table></figure><h3 id="五、更新"><a href="#五、更新" class="headerlink" title="五、更新"></a>五、更新</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> mytable </span><br><span class="line"><span class="keyword">set</span> col <span class="operator">=</span> val;</span><br><span class="line"><span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><h3 id="六、删除"><a href="#六、删除" class="headerlink" title="六、删除"></a>六、删除</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> mytable</span><br><span class="line"><span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>TRUNCATE TABLE 可以清空表，也就是删除所有行。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">TRUNCATE</span> <span class="keyword">TABLE</span> mytable;</span><br></pre></td></tr></table></figure><p>使用更新和删除操作一定要用where子句，不然会把整个表的数据都破坏。可以先用 SELECT 语句进行测试，防止错误删除。</p><h3 id="七、查询"><a href="#七、查询" class="headerlink" title="七、查询"></a>七、查询</h3><h5 id="DISTINCT"><a href="#DISTINCT" class="headerlink" title="DISTINCT"></a>DISTINCT</h5><p>相同值只会出现一次。它作用于所有列，也就是说在所有列中出现了相同的值就算相同。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">DISTINCT</span>  col1,col2</span><br><span class="line"><span class="keyword">from</span> mytable</span><br></pre></td></tr></table></figure><h5 id="LIMIT"><a href="#LIMIT" class="headerlink" title="LIMIT"></a>LIMIT</h5><p>限制返回的行数，可以有两个参数，第一个参数为起始行，从0开始，第二个参数为返回的总行数。</p><p>返回前五行</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">from</span> mytable</span><br><span class="line">limit <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> mytable</span><br><span class="line">LIMIT <span class="number">0</span>, <span class="number">5</span>;</span><br></pre></td></tr></table></figure><p>返回第 3 ~ 5 行：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">from</span> mytable </span><br><span class="line">limit <span class="number">2</span>,<span class="number">3</span></span><br></pre></td></tr></table></figure><h3 id="八、排序"><a href="#八、排序" class="headerlink" title="八、排序"></a>八、排序</h3><ul><li>ASC：升序（默认）</li><li>DESC：降序</li></ul><p>可以按多个列进行排序，并且为每个列指定不同的排序方式</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">from</span> mytable</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> col <span class="keyword">asc</span>,col2 <span class="keyword">desc</span>;</span><br></pre></td></tr></table></figure><h3 id="九、过滤"><a href="#九、过滤" class="headerlink" title="九、过滤"></a>九、过滤</h3><p>不进行过滤的话数据非常大，导致通过网络传输了多余的数据量，从而浪费了网络带宽。因此尽量使用SQL语句来过滤不必要的数据，而不是传输所有的数据到客户端然中然后由客户端进行过滤。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">from</span> mytable</span><br><span class="line"><span class="keyword">where</span> col <span class="keyword">is</span> <span class="keyword">NUll</span></span><br></pre></td></tr></table></figure><p>下表显示了 WHERE 子句可用的操作符</p><table><thead><tr><th align="center">操作符</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">&#x3D;</td><td align="center">等于</td></tr><tr><td align="center">&lt;</td><td align="center">小于</td></tr><tr><td align="center">&gt;</td><td align="center">大于</td></tr><tr><td align="center">&lt;&gt; 或 !&#x3D;</td><td align="center">不等于</td></tr><tr><td align="center">&lt;&#x3D; 或!&gt;</td><td align="center">小于等于</td></tr><tr><td align="center">&gt;&#x3D; 或 !&lt;</td><td align="center">大于等于</td></tr><tr><td align="center">BETWEEN</td><td align="center">在两个值之间</td></tr><tr><td align="center">IS NULL</td><td align="center">为 NULL 值</td></tr></tbody></table><p>NULL和、0、空字符都不同。</p><p>AND 和OR 用来连接多个过滤条件。优先处理AND。当一个过滤条件涉及到多个AND和OR时，可以使用（）来决定优先级，使得优先级关系更清晰。</p><p>IN操作符用于匹配一组值，其后也可以接一个select子句，从而匹配子查询得到一组值。</p><p>NOT操作符用于否定一个条件。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;mysql-数据库是什么？&quot;&gt;&lt;a href=&quot;#mysql-数据库是什么？&quot; class=&quot;headerlink&quot; title=&quot;mysql 数据库是什么？&quot;&gt;&lt;/a&gt;mysql 数据库是什么？&lt;/h2&gt;&lt;p&gt;首先它是一种开源的关系型数据库，而关系型数据库的意思</summary>
      
    
    
    
    <category term="mysql" scheme="https://blog.zzcym.asia/categories/mysql/"/>
    
    
    <category term="后端" scheme="https://blog.zzcym.asia/tags/%E5%90%8E%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>介绍</title>
    <link href="https://blog.zzcym.asia/2023/04/04/%E4%BB%8B%E7%BB%8D/"/>
    <id>https://blog.zzcym.asia/2023/04/04/%E4%BB%8B%E7%BB%8D/</id>
    <published>2023-04-03T16:52:18.000Z</published>
    <updated>2023-04-03T16:55:11.848Z</updated>
    
    <content type="html"><![CDATA[<p>公司用到了thingworx，所以后续会在这里发thingworx相关的文档，有兴趣的朋友可以看一下</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;公司用到了thingworx，所以后续会在这里发thingworx相关的文档，有兴趣的朋友可以看一下&lt;/p&gt;
</summary>
      
    
    
    
    <category term="Thingworx" scheme="https://blog.zzcym.asia/categories/Thingworx/"/>
    
    
  </entry>
  
  <entry>
    <title>后台管理系统</title>
    <link href="https://blog.zzcym.asia/2023/04/04/%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/"/>
    <id>https://blog.zzcym.asia/2023/04/04/%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/</id>
    <published>2023-04-03T16:52:18.000Z</published>
    <updated>2023-04-03T16:56:24.909Z</updated>
    
    
    
    
    <category term="Thhingworx" scheme="https://blog.zzcym.asia/categories/Thhingworx/"/>
    
    
    <category term="后端" scheme="https://blog.zzcym.asia/tags/%E5%90%8E%E7%AB%AF/"/>
    
    <category term="前端" scheme="https://blog.zzcym.asia/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
</feed>
